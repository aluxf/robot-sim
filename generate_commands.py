import random
import os

def generate_place_command():
    """
    Generate a random PLACE command for the robot simulation.

    This function randomly selects x and y coordinates (between 0 and 4, inclusive)
    and a random direction from the available choices ("NORTH", "EAST", "SOUTH", "WEST").
    It then returns a command string in the format 'PLACE,x,y,direction'.

    Returns:
        str: A string representing the PLACE command.
    """
    x = random.randint(0, 4)
    y = random.randint(0, 4)
    direction = random.choice(["NORTH", "EAST", "SOUTH", "WEST"])
    return f"PLACE,{x},{y},{direction}"

def generate_command_file(filename, num_commands, place_first):
    """
    Generate a command file with a mix of valid and invalid commands.

    This function writes a series of robot simulation commands to a file.
    Commands are written one per line, and after each command a REPORT command is added
    to output the robot's state after executing that command.
    
    Parameters:
        filename (str): The path of the file to write commands.
        num_commands (int): The number of command iterations (each iteration produces one command and one REPORT).
        place_first (bool): If True, the file starts with an initial valid PLACE command followed by a REPORT.
    
    The function uses:
        - A list of valid commands: "PLACE", "MOVE", "MOVE", "LEFT", "RIGHT"
        - A list of invalid commands to simulate error scenarios.
        - A 10% chance to use an invalid command instead of a valid one.
    """
    # List of valid commands for simulation
    commands = ["PLACE", "MOVE", "MOVE", "LEFT", "RIGHT"]
    # List of invalid commands to simulate errors or unexpected input
    invalid_commands = [
        "JUMP",
        "PLACE,1,2,3",
        "PLACE,1,2",
        "PLACE,1,2,NORTH,EXTRA",
        "PLACE,999,999,NORTH"
    ]

    with open(filename, 'w') as file:
        # Optionally, write an initial valid PLACE command followed by a REPORT.
        if place_first:
            file.write(generate_place_command() + "\n")
            file.write("REPORT\n")
        
        for _ in range(num_commands):
            # Determine whether to use an invalid command (10% chance) or a valid command.
            if random.random() < 0.1:  
                command = random.choice(invalid_commands)
            else:
                command = random.choice(commands)
                # If the command is PLACE, generate a complete random PLACE command.
                if command == "PLACE":
                    command = generate_place_command()
            
            # Write the selected command and a subsequent REPORT to the file.
            file.write(f"{command}\n")
            file.write("REPORT\n")

def generate_command_files(num_files, num_commands_per_file, place_first):
    """
    Generate multiple command files for testing the robot simulation.

    This function creates a specified number of files in a folder named "random_commands".
    Each file contains a series of commands generated by 'generate_command_file'.
    
    Parameters:
        num_files (int): The number of files to generate.
        num_commands_per_file (int): The number of command iterations per file.
        place_first (bool): If True, each file will start with an initial PLACE command and REPORT.
    """
    for i in range(num_files):
        filename = f"random_commands/commands_{i+1}.txt"
        generate_command_file(filename, num_commands_per_file, place_first)
        print(f"Generated {filename}")

if __name__ == "__main__":
    """
    Main execution block for generating command files.

    This block ensures that the output directory exists and then generates a set
    of command files based on predefined configuration parameters.
    """
    # Create the output directory if it doesn't exist.
    os.makedirs("random_commands", exist_ok=True)
    
    # Configuration: number of files to generate, number of commands per file, and whether to include an initial PLACE command.
    files = 10
    commands_per_file = 20
    place_first = True

    # Generate the command files.
    generate_command_files(files, commands_per_file, place_first)
